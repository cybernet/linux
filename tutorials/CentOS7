# CentOS 6.x x64 tutorial / Works on openVZ containers also

# We start with

$ yum update

# Then install the required repo's for this tutorial to work

# epEL repo`

yum install epel* -y

# Swap

cd /usr/bin && wget -N https://raw.githubusercontent.com/cybernet/linux/centos/sh/swap.sh
chmod +x swap.sh
swap.sh

# Change TimeZone to London -> i chosed London because is GMT+0, easier to implement in code ...

ln -sf /usr/share/zoneinfo/Europe/London /etc/localtime

# MySQL server, wGET && hTOP

yum install mariadb-server wget htop -y

# start MySQL

service mariadb start

# warning MySQL must be running before configuring it

mysql_secure_installation

# remove httpd

service httpd stop
chkconfig httpd off
yum remove httpd -y

# add nginx repo & yum priority plugin

yum install yum-plugin-priorities -y && cd /etc/yum.repos.d && wget -N https://raw.githubusercontent.com/cybernet/linux/centos/repos/nginx.repo

# add nginx key

rpm --import http://nginx.org/keys/nginx_signing.key

yum install nginx -y

# start the service

service nginx start


# This will show the iP address of the server ( just in case you wonder how the welcome page looks like )

# VPS
ifconfig venet0:0 | grep inet | awk '{ print $2 }'

# server
ifconfig eth0 | grep inet | awk '{ print $2 }'

# Let's install PHP now
# while most of the tutorials will tell you to install php from remi, i choose not to
# because RHEL/CentOS will provide security patches much faster then any other repo + 5.3 is much more stable than 5.4 / it's just my opinion
# however i will provide both ways

# MyWAY - php 5.3 from { RHEL/CentOS } 6

yum install php-cli php-pear php-pdo php-mysql php-pgsql php-fpm php-gd php-mbstring php-mcrypt php-xml -y

# REMi Way

yum --enablerepo=remi install php-cli php-pear php-pdo php-mysql php-pgsql php-fpm php-gd php-mbstring php-mcrypt php-xml -y

#

mkdir -p /etc/nginx/{sites-available,sites-enabled}

cd /etc/nginx && wget -N https://raw.githubusercontent.com/cybernet/linux/centos/etc/nginx/nginx.conf
cd /etc/nginx && wget -N https://raw.githubusercontent.com/cybernet/linux/centos/etc/nginx/mime.types
cd /etc/nginx && wget -N https://raw.githubusercontent.com/cybernet/linux/centos/etc/nginx/caches.conf
cd /etc/nginx && wget -N https://raw.githubusercontent.com/cybernet/linux/centos/etc/nginx/repel


mv /etc/nginx/conf.d/default.conf /etc/nginx/sites-available

# Don't eXpose php in header

sed -i -e 's/expose_php = On/expose_php = Off/g' /etc/php.ini

# Configure php-fpm for { www } pool
# Up to now, we have used TCP connections for our PHP-FPM pool (127.0.0.1:9000, 127.0.0.1:9001, etc.). This causes some overhead. Fortunately we can use Unix sockets instead of TCP connections for our pools and get rid of this overhead. Therefore, Unix sockets are more performant than TCP connections.

# We want sockets to be created in the /var/run/php-fpm directory, therefore we have to create that directory first :

mkdir -p /var/run/php-fpm

# Better with sockets

sed -i -e 's/127.0.0.1:9000/\/var\/run\/php-fpm\/www.socket/g' -e 's/pm.start_servers = 5/pm.start_servers = 1/g' -e 's/pm.min_spare_servers = 5/pm.min_spare_servers = 1/g' -e 's/pm.max_children = 50/pm.max_children = 10/g' -e 's/pm.max_spare_servers = 35/pm.max_spare_servers = 5/g' -e 's/user = apache/user = nginx/g' -e 's/group = apache/group = nginx/g' -e 's/;listen.owner = nobody/;listen.owner = nginx/g' -e 's/;listen.group = nobody/;listen.group = nginx/g' -e 's/;chdir = \/var\/www/chdir = \/var\/www/g' /etc/php-fpm.d/www.conf

sed -i -e 's/post_max_size = 8M/post_max_size = 50M/g' -e 's/upload_max_filesize = 2M/upload_max_filesize = 50M/g' /etc/php.ini

# Disable MySQL persistent connections / they are slowing the server

sed -i -e 's/mysql.allow_persistent = On/mysql.allow_persistent = Off/g' /etc/php.ini

# Change TimeZone to London -> i chosed London because is GMT+0, easier to implement in code ...

sed -i -e 's/;date.timezone =/date.timezone = "Europe\/London"/g' /etc/php.ini


# Disable sending mail header / http://www.php.net/manual/en/mail.configuration.php#ini.mail.add-x-header
sed -i -e 's/mail.add_x_header = On/mail.add_x_header = Off/g' /etc/php.ini

cd /etc/nginx/sites-enabled/
for d in ../sites-available/*; do ln -s /etc/nginx/sites-available/${d##*/}; done
nginx -t

for s in nginx php-fpm mysqld; do service $s restart; done

# batz start

cd /etc && wget -N https://raw.githubusercontent.com/cybernet/linux/centos/etc/php-fpm.conf

cd /etc/php-fpm.d && wget -N https://raw.githubusercontent.com/cybernet/linux/centos/etc/php-fpm.d/batz.conf

# aDD` default files for users

mkdir -p /etc/skel/{session,www,tmp,logs/www} && touch /etc/skel/{www-error,www-slow,logs/www/error,logs/www/access}.log

adduser batz && passwd -l batz

# batz end

# replacing sendmail with postfix
# postfix is better in performance and smarter
# don't try to remove sendmail before installing postfix because it will remove : cronie cronie-noana cron crontabs / and you really don't want to live in a world without cronD
# at the moment i will use postfix with default configuration

yum install postfix -y
yum remove sendmail -y

# start postfix server

service postfix start

# Pure FTPd

# install latest version of Pure FTPd

yum install pure-ftpd -y

# firewall entry

iptables -I INPUT -m tcp -p tcp --dport 20:21 -j ACCEPT

# Pure FTPd conf's
cd /etc/pure-ftpd && wget -N https://raw.githubusercontent.com/cybernet/linux/centos/etc/pure-ftpd/pure-ftpd.conf && touch pureftpd.pdb

# Pure FTPd TLS conf

mkdir -p /etc/ssl/private/ && openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout /etc/ssl/private/pure-ftpd.pem -out /etc/ssl/private/pure-ftpd.pem

# answer the question && then ... and then !

chmod 600 /etc/ssl/private/pure-ftpd.pem

# Pure FTPd TLS start

service pure-ftpd start

# Pure FTPd TLS example user

pure-pw useradd batz -u batz -d /home/batz -t 4096 -T 4096 -Q 4096 -y 5 -N 1024 -m

# enable on boot required services
for s in nginx php-fpm pure-ftpd postfix mysqld; do chkconfig $s --levels 235 on; done
